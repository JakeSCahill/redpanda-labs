name: Run doc tests

on: pull_request

jobs:
  find-and-run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get changed files
        id: get-changed-files
        uses: lots0logs/gh-action-get-changed-files@2.2.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version: 21

      - name: Install dependencies
        run: npm i

      - name: Install latest rpk
        run: |
          #!/bin/bash
          set -e

          FILENAME="rpk-linux-amd64.zip"
          URL_BASE="https://github.com/redpanda-data/redpanda/releases"

          # Download the latest version of rpk
          echo "Downloading ${FILENAME}..."
          curl -LO "${URL_BASE}/latest/download/${FILENAME}"

          # Ensure the unzip command is available
          sudo apt-get update && sudo apt-get install -y unzip

          # Unzip the rpk binary to the target directory
          unzip -o "${FILENAME}" -d $HOME/.local/bin

          # Remove the downloaded archive
          rm "${FILENAME}"

          # Add the target directory to PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH

          # Verify installation
          echo "rpk has been installed. Version information:"
          rpk version

      - name: Run test.js if present
        run: |
          #!/bin/bash
          set -e

          # Use jq to read the list of modified files
          MODIFIED_FILES=$(jq -r '.[]' ${HOME}/files_modified.json)

          echo "Modified files: ${MODIFIED_FILES}"

          # Track directories where test.js has been run to avoid duplicate runs
          RUN_DIRECTORIES=()

          for file in ${MODIFIED_FILES}; do
            DIRECTORY=$(dirname "$file")

            # Check both the changed file's directory and child directories for test.js
            if find "$DIRECTORY" -name "test.js" -exec dirname {} \; | grep -q .; then
              TEST_DIR=$(dirname "$file")
              # Check if test.js has already been run for this directory
              if [[ ! " ${RUN_DIRECTORIES[*]} " =~ " ${TEST_DIR} " ]]; then
                # Run test.js
                echo "Running test.js in $TEST_DIR"
                (cd $TEST_DIR && node test.js)
                # Mark this directory as processed
                RUN_DIRECTORIES+=("$TEST_DIR")
              fi
            fi
          done

          if [ ${#RUN_DIRECTORIES[@]} -eq 0 ]; then
            echo "No test.js found in changed directories."
          fi
